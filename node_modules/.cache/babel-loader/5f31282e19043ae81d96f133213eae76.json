{"ast":null,"code":"import _defineProperty from \"/Users/Lewamey/Desktop/final_project/marketplace/frontend-marketplace/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const userPostFetch = user => {\n  return dispatch => {\n    return fetch('http://localhost:3000/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(res => res.json()).then(data => {\n      if (data.token) {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user)); // this.props.history.goBack()\n      }\n    });\n  };\n};\n\nconst loginUser = userObj => ({\n  type: 'LOGIN_USER',\n  payload: userObj\n});\n\nexport const userLoginFetch = user => {\n  return dispatch => {\n    return fetch('http://localhost:3000/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(res => res.json()).then(data => {\n      if (data.token) {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user)); // this.props.history.goBack()\n      }\n    });\n  };\n};\nexport const getProfileFetch = () => {\n  return dispatch => {\n    const token = localStorage.token;\n\n    if (token) {\n      fetch('http://localhost:3000/profile', {\n        headers: {\n          \"Authorization\": token\n        }\n      }).then(res => res.json()).then(profileData => {\n        // debugger\n        // console.log(profileData);\n        dispatch(loginUser(profileData));\n      });\n    }\n  };\n};\nexport const logoutUser = () => ({\n  type: 'LOGOUT_USER'\n}); // Fetch categories and set the state\n\nexport const fetchCategories = () => dispatch => {\n  fetch('http://localhost:3000/categories').then(res => res.json()).then(categoriesJson => {\n    dispatch({\n      type: \"GET_CURRENT_CATEGORIES\",\n      categories: categoriesJson\n    });\n  });\n}; // fetch all products\n\nexport const fetchProducts = () => dispatch => {\n  fetch('http://localhost:3000/products').then(res => res.json()).then(productsJson => {\n    dispatch({\n      type: \"GET_CURRENT_PRODUCTS\",\n      products: productsJson\n    });\n  });\n}; // get the product id and fetch for the product\n\nexport const grabSingleProduct = product_id => dispatch => {\n  console.log(product_id);\n  fetch(\"http://localhost:3000/\".concat(product_id)).then(res => res.json()).then(ProductJson => {\n    dispatch({\n      type: \"GET_SINGLE_PRODUCT\",\n      product: ProductJson\n    });\n  }); // dispatch({ type: \"GET_SINGLE_PRODUCT\", product: singleProduct})\n}; // get the id from router and fetch for a Category\n\nexport const grabACategory = category_id => dispatch => {\n  // dispatch({ type: \"GET_SINGLE_CATEGORY\", category: singleCategory })\n  console.log(category_id);\n  fetch(\"http://localhost:3000/categories/\".concat(category_id)).then(res => res.json()).then(categoryJson => {\n    dispatch({\n      type: \"GET_SINGLE_CATEGORY\",\n      category: categoryJson\n    });\n  });\n}; // GET_SINGLE_CATEGORY\n// If there is a current user and the curent order is !null fetch for the order and set state\n\nexport const fetchCart = current_user => dispatch => {\n  console.log(current_user);\n  fetch('http://localhost:3000/products').then(res => res.json()).then(productsJson => {\n    dispatch({\n      type: \"GET_CURRENT_PRODUCTS\",\n      products: productsJson\n    });\n  });\n}; // Add to cart action //\n\nexport const addToCart = data => dispatch => {\n  const userId = data.user.id;\n  const currentOrder = data.user.current_order;\n  const productId = data.product.id;\n  let quantity = data.quantity;\n  console.log(data);\n\n  if (currentOrder === null) {\n    // Create new Order\n    console.log(\"current order \", currentOrder);\n    let config4 = {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: userId,\n        product_id: productId\n      })\n    };\n    fetch(\"http://localhost:3000/orders/neworder\", config4).then(rsp => rsp.json()).then(data => {\n      const order = _objectSpread({}, data.order, {\n        order_items: data.order_items\n      });\n\n      dispatch({\n        type: \"NEW_ORDER\",\n        cart: order\n      });\n      dispatch({\n        type: \"UPDATE_CURRENT_USER\",\n        current_site_user: data.user\n      });\n    });\n  } else {\n    console.log(\"current order  else\", currentOrder);\n    const token = localStorage.token;\n    let config3 = {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": token,\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        order_id: currentOrder,\n        product_id: productId,\n        quantity: quantity\n      })\n    };\n    fetch(\"http://localhost:3000/order_items\", config3).then(rsp => rsp.json()).then(data => {\n      // const order = {...data.order, order_items: data.order_items}\n      dispatch({\n        type: \"NEW_ORDER\",\n        cart: data\n      });\n      dispatch({\n        type: \"UPDATE_CURRENT_USER\",\n        current_site_user: data\n      });\n    });\n  }\n}; // Remove an Item from cart\n\nexport const removeFromCart = data => dispatch => {\n  const token = localStorage.token;\n  let config4 = {\n    method: \"DELETE\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token,\n      'Accept': 'application/json'\n    }\n  };\n  fetch(\"http://localhost:3000/order_items/\".concat(data), config4).then(rsp => rsp.json()).then(data => {\n    console.log(data);\n    dispatch({\n      type: \"UPDATE_CURRENT_USER\",\n      current_site_user: data\n    }); // const order = {...data.order, order_items: data.order_items}\n    // dispatch({ type: \"NEW_ORDER\", cart: data}) \n  });\n};\nexport const addShippingAddressToCurrentOrder = data => dispatch => {\n  console.log(data);\n  const token = localStorage.token;\n  let config6 = {\n    method: \"PATCH\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token,\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      fname: data.fname,\n      address: data.address,\n      city: data.city,\n      state: data.state,\n      zip: data.zip\n    })\n  };\n  fetch(\"http://localhost:3000/orders/\".concat(data.current_order), config6).then(rsp => rsp.json()).then(data => {\n    console.log(data);\n    dispatch({\n      type: \"UPDATE_CURRENT_USER\",\n      current_site_user: data\n    });\n  });\n};\nexport const updateShippingRate = data => dispatch => {\n  console.log(data);\n  const token = localStorage.token;\n  let config6 = {\n    method: \"PATCH\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token,\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      sh_rate: data.value\n    })\n  };\n  fetch(\"http://localhost:3000/orders/shipping/\".concat(data.current_order), config6).then(rsp => rsp.json()).then(data => {\n    console.log(data); // dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data})\n  });\n};","map":{"version":3,"sources":["/Users/Lewamey/Desktop/final_project/marketplace/frontend-marketplace/src/redux/actions.js"],"names":["userPostFetch","user","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","data","token","localStorage","loginUser","userObj","type","payload","userLoginFetch","getProfileFetch","profileData","logoutUser","fetchCategories","categoriesJson","categories","fetchProducts","productsJson","products","grabSingleProduct","product_id","console","log","ProductJson","product","grabACategory","category_id","categoryJson","category","fetchCart","current_user","addToCart","userId","id","currentOrder","current_order","productId","quantity","config4","user_id","rsp","order","order_items","cart","current_site_user","config3","order_id","removeFromCart","addShippingAddressToCurrentOrder","config6","fname","address","city","state","zip","updateShippingRate","sh_rate","value"],"mappings":"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","sourcesContent":["export const userPostFetch = user => {\n    return dispatch => {\n        return fetch('http://localhost:3000/signup', {\n                method: 'POST',\n                headers: {\n                    'Content-Type':'application/json',\n                    'Accept':'application/json'\n                },\n                body: JSON.stringify(user)\n            })\n            .then(res => res.json())\n            .then(data => {\n                if (data.token) {\n                    localStorage.token = data.token\n                    dispatch(loginUser(data.user))\n                    // this.props.history.goBack()\n                }\n            });\n    }\n}\n\nconst loginUser = userObj => ({\n    type: 'LOGIN_USER',\n    payload: userObj\n})\n\n\n\nexport const userLoginFetch = user => {    \n    return dispatch => {\n        return fetch('http://localhost:3000/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type':'application/json',\n                    'Accept':'application/json'\n                },\n                body: JSON.stringify(user)\n            })\n            .then(res => res.json())\n            .then(data => {\n                if (data.token) {\n                    localStorage.token = data.token\n                    dispatch(loginUser(data.user))\n                    // this.props.history.goBack()\n                }\n            });\n    }\n}\n\nexport const getProfileFetch = () => {\n    return dispatch => {\n        const token = localStorage.token\n        if (token) {\n            fetch('http://localhost:3000/profile', {\n                headers: {\n                    \"Authorization\": token\n                }\n            })\n            .then(res => res.json())\n            .then(profileData => {\n                // debugger\n                // console.log(profileData);\n                \n                dispatch(loginUser(profileData))\n            })\n        }\n    }\n}\n\n\nexport const logoutUser = () => ({\n    type: 'LOGOUT_USER'\n})\n\n\n\n\n\n\n\n\n// Fetch categories and set the state\nexport const fetchCategories = () => dispatch => {\n    fetch('http://localhost:3000/categories')\n        .then(res => res.json())\n        .then(categoriesJson => {\n            dispatch({ type: \"GET_CURRENT_CATEGORIES\", categories: categoriesJson})\n            \n        })\n}\n\n\n// fetch all products\nexport const fetchProducts = () => dispatch => {\n    fetch('http://localhost:3000/products')\n        .then(res => res.json())\n        .then(productsJson => {\n            dispatch({ type: \"GET_CURRENT_PRODUCTS\", products: productsJson})\n            \n        })\n}\n\n\n// get the product id and fetch for the product\nexport const grabSingleProduct = (product_id) => dispatch => {\n    console.log(product_id);\n    fetch(`http://localhost:3000/${product_id}`)\n    .then(res => res.json())\n    .then(ProductJson => {\n        \n        dispatch({ type: \"GET_SINGLE_PRODUCT\", product: ProductJson})\n        \n    })\n    // dispatch({ type: \"GET_SINGLE_PRODUCT\", product: singleProduct})\n}\n\n\n\n// get the id from router and fetch for a Category\nexport const grabACategory = (category_id) => dispatch => {\n    // dispatch({ type: \"GET_SINGLE_CATEGORY\", category: singleCategory })\n    console.log(category_id);\n    fetch(`http://localhost:3000/categories/${category_id}`)\n        .then(res => res.json())\n        .then(categoryJson => {\n            \n            dispatch({ type: \"GET_SINGLE_CATEGORY\", category: categoryJson})\n            \n        })\n}\n// GET_SINGLE_CATEGORY\n\n\n// If there is a current user and the curent order is !null fetch for the order and set state\nexport const fetchCart = current_user => dispatch => {\n   console.log(current_user)\n   \n    fetch('http://localhost:3000/products')\n        .then(res => res.json())\n        .then(productsJson => {\n            dispatch({ type: \"GET_CURRENT_PRODUCTS\", products: productsJson})\n            \n        })\n}\n\n\n\n\n\n\n// Add to cart action //\nexport const addToCart = data => dispatch => {\n    const userId = data.user.id  \n    const currentOrder = data.user.current_order\n    const productId = data.product.id\n    let quantity = data.quantity\n\n    console.log(data);\n    \n\n    if (currentOrder === null) {\n        // Create new Order\n        console.log(\"current order \",  currentOrder);\n        \n        let config4 = {\n            method: \"POST\",\n            headers: {\n                'Content-Type':'application/json',\n                'Accept':'application/json'\n            },\n            body: JSON.stringify({user_id: userId, product_id: productId})\n        }\n        \n        fetch(\"http://localhost:3000/orders/neworder\", config4)\n            .then(rsp => rsp.json())\n            .then(data => {\n                const order = {...data.order, order_items: data.order_items}\n                dispatch({ type: \"NEW_ORDER\", cart: order}) \n                dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data.user}) \n            }) \n    } else {\n        console.log(\"current order  else\",  currentOrder);\n        const token = localStorage.token\n\n            let config3 = {\n                method: \"POST\",\n                headers: {\n                'Content-Type':'application/json',\n                \"Authorization\": token,\n                'Accept':'application/json'\n                },\n                body: JSON.stringify({order_id: currentOrder, product_id: productId, quantity: quantity})\n            }\n            \n            fetch(\"http://localhost:3000/order_items\", config3)\n                .then(rsp => rsp.json())\n                .then(data => {\n                    // const order = {...data.order, order_items: data.order_items}\n                    dispatch({ type: \"NEW_ORDER\", cart: data}) \n                    dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data}) \n\n                }) \n        }\n\n    }\n\n\n    // Remove an Item from cart\n    export const removeFromCart = data => dispatch => {\n        const token = localStorage.token\n        let config4 = {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type':'application/json',\n                'Authorization': token,\n                'Accept':'application/json'\n            }\n        }\n        \n        fetch(`http://localhost:3000/order_items/${data}`, config4)\n        .then(rsp => rsp.json())\n        .then(data => {\n            console.log(data);\n            dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data}) \n            // const order = {...data.order, order_items: data.order_items}\n            // dispatch({ type: \"NEW_ORDER\", cart: data}) \n        }) \n        \n    }\n    \n    \n    \n    export const addShippingAddressToCurrentOrder = data => dispatch => {\n        console.log(data);\n        const token = localStorage.token\n\n        let config6 = {\n            method: \"PATCH\",\n            headers: {\n            'Content-Type':'application/json',\n            'Authorization': token,\n            'Accept':'application/json'\n            },\n            body: JSON.stringify({fname: data.fname, \n                                                address: data.address, \n                                                city: data.city,\n                                                state: data.state,\n                                                zip: data.zip })\n        }\n        \n        fetch(`http://localhost:3000/orders/${data.current_order}`, config6)\n            .then(rsp => rsp.json())\n            .then(data => {\n                console.log(data);\n                dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data})\n            }) \n    }\n        \n    \n    export const updateShippingRate = data => dispatch => {\n        console.log(data);\n        \n        const token = localStorage.token\n\n        let config6 = {\n            method: \"PATCH\",\n            headers: {\n            'Content-Type':'application/json',\n            'Authorization': token,\n            'Accept':'application/json'\n            },\n            body: JSON.stringify({sh_rate: data.value })\n        }\n        \n        fetch(`http://localhost:3000/orders/shipping/${data.current_order}`, config6)\n            .then(rsp => rsp.json())\n            .then(data => {\n                console.log(data);\n                // dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data})\n            }) \n    }"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export const userPostFetch = user => {\n  return dispatch => {\n    return fetch('http://localhost:3000/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(res => res.json()).then(data => {\n      if (data.token) {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user)); // this.props.history.goBack()\n      }\n    });\n  };\n};\n\nconst loginUser = userObj => ({\n  type: 'LOGIN_USER',\n  payload: userObj\n});\n\nexport const userLoginFetch = user => {\n  return dispatch => {\n    return fetch('http://localhost:3000/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(res => res.json()).then(data => {\n      if (data.token) {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user)); // this.props.history.goBack()\n        // dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data.user}) \n      }\n    });\n  };\n};\nexport const getProfileFetch = () => {\n  return dispatch => {\n    const token = localStorage.token;\n\n    if (token) {\n      fetch('http://localhost:3000/profile', {\n        headers: {\n          \"Authorization\": token\n        }\n      }).then(res => res.json()).then(profileData => {\n        dispatch(loginUser(profileData));\n      });\n    }\n  };\n};\nexport const logoutUser = () => ({\n  type: 'LOGOUT_USER'\n}); // Fetch categories and set the state\n\nexport const fetchCategories = () => dispatch => {\n  fetch('http://localhost:3000/categories').then(res => res.json()).then(categoriesJson => {\n    dispatch({\n      type: \"GET_CURRENT_CATEGORIES\",\n      categories: categoriesJson\n    });\n  });\n}; // fetch all products\n\nexport const fetchProducts = () => dispatch => {\n  fetch('http://localhost:3000/products').then(res => res.json()).then(productsJson => {\n    dispatch({\n      type: \"GET_CURRENT_PRODUCTS\",\n      products: productsJson\n    });\n  });\n}; // get the product id and fetch for the product\n\nexport const grabSingleProduct = product_id => dispatch => {\n  fetch(\"http://localhost:3000/\".concat(product_id)).then(res => res.json()).then(ProductJson => {\n    dispatch({\n      type: \"GET_SINGLE_PRODUCT\",\n      product: ProductJson\n    });\n  }); // dispatch({ type: \"GET_SINGLE_PRODUCT\", product: singleProduct})\n}; // get the id from router and fetch for a Category\n\nexport const grabACategory = category_id => dispatch => {\n  // dispatch({ type: \"GET_SINGLE_CATEGORY\", category: singleCategory })\n  fetch(\"http://localhost:3000/categories/\".concat(category_id)).then(res => res.json()).then(categoryJson => {\n    dispatch({\n      type: \"GET_SINGLE_CATEGORY\",\n      category: categoryJson\n    });\n  });\n}; // GET_SINGLE_CATEGORY\n// If there is a current user and the curent order is !null fetch for the order and set state\n\nexport const fetchCart = current_user => dispatch => {\n  fetch('http://localhost:3000/products').then(res => res.json()).then(productsJson => {\n    dispatch({\n      type: \"GET_CURRENT_PRODUCTS\",\n      products: productsJson\n    });\n  });\n}; // Add to cart action //\n\nexport const addToCart = data => dispatch => {\n  const userId = data.user.id;\n  const currentOrder = data.user.current_order;\n  const productId = data.product.id;\n  let quantity = data.quantity;\n\n  if (currentOrder === null) {\n    // Create new Order\n    const token = localStorage.token;\n    let config4 = {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": token,\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: userId,\n        product_id: productId,\n        quantity: quantity\n      })\n    };\n    fetch(\"http://localhost:3000/orders/neworder\", config4).then(rsp => rsp.json()).then(data => {\n      // const order = {...data.order, order_items: data.order_items}\n      // dispatch({ type: \"NEW_ORDER\", cart: order}) \n      dispatch({\n        type: \"UPDATE_CURRENT_USER\",\n        current_site_user: data\n      });\n    });\n  } else {\n    const token = localStorage.token;\n    let config3 = {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": token,\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        order_id: currentOrder,\n        product_id: productId,\n        quantity: quantity\n      })\n    };\n    fetch(\"http://localhost:3000/order_items\", config3).then(rsp => rsp.json()).then(data => {\n      // const order = {...data.order, order_items: data.order_items}\n      // dispatch({ type: \"NEW_ORDER\", cart: data}) \n      dispatch({\n        type: \"UPDATE_CURRENT_USER\",\n        current_site_user: data\n      });\n    });\n  }\n}; // Remove an Item from cart\n\nexport const removeFromCart = data => dispatch => {\n  const token = localStorage.token;\n  let config4 = {\n    method: \"DELETE\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token,\n      'Accept': 'application/json'\n    }\n  };\n  fetch(\"http://localhost:3000/order_items/\".concat(data), config4).then(rsp => rsp.json()).then(data => {\n    dispatch({\n      type: \"UPDATE_CURRENT_USER\",\n      current_site_user: data\n    }); // const order = {...data.order, order_items: data.order_items}\n    // dispatch({ type: \"NEW_ORDER\", cart: data}) \n  });\n};\nexport const addShippingAddressToCurrentOrder = data => dispatch => {\n  const token = localStorage.token;\n  let config6 = {\n    method: \"PATCH\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token,\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      fname: data.fname,\n      address: data.address,\n      city: data.city,\n      state: data.state,\n      zip: data.zip\n    })\n  };\n  fetch(\"http://localhost:3000/orders/\".concat(data.current_order), config6).then(rsp => rsp.json()).then(data => {\n    dispatch({\n      type: \"UPDATE_CURRENT_USER\",\n      current_site_user: data\n    });\n  });\n};\nexport const updateShippingRate = data => dispatch => {\n  const token = localStorage.token;\n  let config6 = {\n    method: \"PATCH\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token,\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      sh_rate: data.value\n    })\n  };\n  fetch(\"http://localhost:3000/orders/shipping/\".concat(data.current_order), config6).then(rsp => rsp.json()).then(data => {\n    dispatch({\n      type: \"UPDATE_CURRENT_USER\",\n      current_site_user: data\n    });\n  });\n};\nexport const changeUserCurrentOrderAttToNull = data => dispatch => {\n  const token = localStorage.token;\n  let config7 = {\n    method: \"PATCH\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token,\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify()\n  };\n  fetch(\"http://localhost:3000/users/order_complete/\".concat(data), config7).then(rsp => rsp.json()).then(data => {\n    dispatch({\n      type: \"UPDATE_CURRENT_USER\",\n      current_site_user: data\n    });\n  });\n};","map":{"version":3,"sources":["/Users/Lewamey/Desktop/eCom/book-store-frontend/src/redux/actions.js"],"names":["userPostFetch","user","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","data","token","localStorage","loginUser","userObj","type","payload","userLoginFetch","getProfileFetch","profileData","logoutUser","fetchCategories","categoriesJson","categories","fetchProducts","productsJson","products","grabSingleProduct","product_id","ProductJson","product","grabACategory","category_id","categoryJson","category","fetchCart","current_user","addToCart","userId","id","currentOrder","current_order","productId","quantity","config4","user_id","rsp","current_site_user","config3","order_id","removeFromCart","addShippingAddressToCurrentOrder","config6","fname","address","city","state","zip","updateShippingRate","sh_rate","value","changeUserCurrentOrderAttToNull","config7"],"mappings":"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","sourcesContent":["export const userPostFetch = user => {\n    return dispatch => {\n        return fetch('http://localhost:3000/signup', {\n                method: 'POST',\n                headers: {\n                    'Content-Type':'application/json',\n                    'Accept':'application/json'\n                },\n                body: JSON.stringify(user)\n            })\n            .then(res => res.json())\n            .then(data => {\n                if (data.token) {\n                    localStorage.token = data.token\n                    dispatch(loginUser(data.user))\n                    // this.props.history.goBack()\n                }\n            });\n    }\n}\n\nconst loginUser = userObj => ({\n    type: 'LOGIN_USER',\n    payload: userObj\n})\n\n\nexport const userLoginFetch = user => {    \n    return dispatch => {\n        return fetch('http://localhost:3000/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type':'application/json',\n                    'Accept':'application/json'\n                },\n                body: JSON.stringify(user)\n            })\n            .then(res => res.json())\n            .then(data => {\n                if (data.token) {\n                    localStorage.token = data.token\n                    dispatch(loginUser(data.user))\n                    // this.props.history.goBack()\n                    // dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data.user}) \n                }\n            });\n    }\n}\n\nexport const getProfileFetch = () => {\n    return dispatch => {\n        const token = localStorage.token\n        if (token) {\n            fetch('http://localhost:3000/profile', {\n                headers: {\n                    \"Authorization\": token\n                }\n            })\n            .then(res => res.json())\n            .then(profileData => {                \n                dispatch(loginUser(profileData))\n            })\n        }\n    }\n}\n\n\nexport const logoutUser = () => ({\n    type: 'LOGOUT_USER'\n})\n\n\n\n\n\n\n\n\n// Fetch categories and set the state\nexport const fetchCategories = () => dispatch => {\n    fetch('http://localhost:3000/categories')\n        .then(res => res.json())\n        .then(categoriesJson => {\n            dispatch({ type: \"GET_CURRENT_CATEGORIES\", categories: categoriesJson})\n            \n        })\n}\n\n\n// fetch all products\nexport const fetchProducts = () => dispatch => {\n    fetch('http://localhost:3000/products')\n        .then(res => res.json())\n        .then(productsJson => {\n            dispatch({ type: \"GET_CURRENT_PRODUCTS\", products: productsJson})\n            \n        })\n}\n\n\n// get the product id and fetch for the product\nexport const grabSingleProduct = (product_id) => dispatch => {\n    fetch(`http://localhost:3000/${product_id}`)\n    .then(res => res.json())\n    .then(ProductJson => {\n        \n        dispatch({ type: \"GET_SINGLE_PRODUCT\", product: ProductJson})\n        \n    })\n    // dispatch({ type: \"GET_SINGLE_PRODUCT\", product: singleProduct})\n}\n\n\n\n// get the id from router and fetch for a Category\nexport const grabACategory = (category_id) => dispatch => {\n    // dispatch({ type: \"GET_SINGLE_CATEGORY\", category: singleCategory })\n    fetch(`http://localhost:3000/categories/${category_id}`)\n        .then(res => res.json())\n        .then(categoryJson => {\n            \n            dispatch({ type: \"GET_SINGLE_CATEGORY\", category: categoryJson})\n            \n        })\n}\n// GET_SINGLE_CATEGORY\n\n\n// If there is a current user and the curent order is !null fetch for the order and set state\nexport const fetchCart = current_user => dispatch => {   \n    fetch('http://localhost:3000/products')\n        .then(res => res.json())\n        .then(productsJson => {\n            dispatch({ type: \"GET_CURRENT_PRODUCTS\", products: productsJson})\n            \n        })\n}\n\n\n\n\n\n\n// Add to cart action //\nexport const addToCart = data => dispatch => {\n    const userId = data.user.id  \n    const currentOrder = data.user.current_order\n    const productId = data.product.id\n    let quantity = data.quantity        \n\n    if (currentOrder === null) {\n        // Create new Order\n        const token = localStorage.token\n\n\n        let config4 = {\n            method: \"POST\",\n            headers: {\n                'Content-Type':'application/json',\n                \"Authorization\": token,\n                'Accept':'application/json'\n            },\n            body: JSON.stringify({user_id: userId, product_id: productId, quantity: quantity})\n        }\n        \n        fetch(\"http://localhost:3000/orders/neworder\", config4)\n            .then(rsp => rsp.json())\n            .then(data => {\n                // const order = {...data.order, order_items: data.order_items}\n                // dispatch({ type: \"NEW_ORDER\", cart: order}) \n                dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data}) \n            }) \n    } else {\n        const token = localStorage.token\n\n            let config3 = {\n                method: \"POST\",\n                headers: {\n                'Content-Type':'application/json',\n                \"Authorization\": token,\n                'Accept':'application/json'\n                },\n                body: JSON.stringify({order_id: currentOrder, product_id: productId, quantity: quantity})\n            }\n            \n            fetch(\"http://localhost:3000/order_items\", config3)\n                .then(rsp => rsp.json())\n                .then(data => {\n                    // const order = {...data.order, order_items: data.order_items}\n                    // dispatch({ type: \"NEW_ORDER\", cart: data}) \n                    dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data}) \n\n                }) \n        }\n\n    }\n\n\n    // Remove an Item from cart\n    export const removeFromCart = data => dispatch => {\n        const token = localStorage.token\n        let config4 = {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type':'application/json',\n                'Authorization': token,\n                'Accept':'application/json'\n            }\n        }\n        \n        fetch(`http://localhost:3000/order_items/${data}`, config4)\n        .then(rsp => rsp.json())\n        .then(data => {\n            dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data}) \n            // const order = {...data.order, order_items: data.order_items}\n            // dispatch({ type: \"NEW_ORDER\", cart: data}) \n        }) \n        \n    }\n    \n    \n    \n    export const addShippingAddressToCurrentOrder = data => dispatch => {\n        const token = localStorage.token\n\n        let config6 = {\n            method: \"PATCH\",\n            headers: {\n            'Content-Type':'application/json',\n            'Authorization': token,\n            'Accept':'application/json'\n            },\n            body: JSON.stringify({fname: data.fname, \n                                                address: data.address, \n                                                city: data.city,\n                                                state: data.state,\n                                                zip: data.zip })\n        }\n        \n        fetch(`http://localhost:3000/orders/${data.current_order}`, config6)\n            .then(rsp => rsp.json())\n            .then(data => {\n                dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data})\n            }) \n    }\n        \n    \n    export const updateShippingRate = data => dispatch => {        \n        const token = localStorage.token\n\n        let config6 = {\n            method: \"PATCH\",\n            headers: {\n            'Content-Type':'application/json',\n            'Authorization': token,\n            'Accept':'application/json'\n            },\n            body: JSON.stringify({sh_rate: data.value })\n        }\n        \n        fetch(`http://localhost:3000/orders/shipping/${data.current_order}`, config6)\n            .then(rsp => rsp.json())\n            .then(data => {\n                dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data})\n            }) \n    }\n\n\n\n    export const changeUserCurrentOrderAttToNull = data => dispatch => {\n        const token = localStorage.token\n\n\n        let config7 = {\n            method: \"PATCH\",\n            headers: {\n            'Content-Type':'application/json',\n            'Authorization': token,\n            'Accept':'application/json'\n            },\n            body: JSON.stringify()\n        }\n        \n        fetch(`http://localhost:3000/users/order_complete/${data}`, config7)\n            .then(rsp => rsp.json())\n            .then(data => {\n                dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data})\n            }) \n\n    }"]},"metadata":{},"sourceType":"module"}
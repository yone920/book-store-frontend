{"ast":null,"code":"export const userPostFetch = user => {\n  return dispatch => {\n    return fetch('http://localhost:3000/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(res => res.json()).then(data => {\n      if (data.token) {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user)); // this.props.history.goBack()\n      }\n    });\n  };\n};\n\nconst loginUser = userObj => ({\n  type: 'LOGIN_USER',\n  payload: userObj\n});\n\nexport const userLoginFetch = user => {\n  console.log(user);\n  return dispatch => {\n    return fetch('http://localhost:3000/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(res => res.json()).then(data => {\n      if (data.token) {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user));\n        console.log(data); // this.props.history.goBack()\n      }\n    });\n  };\n};\nexport const getProfileFetch = () => {\n  return dispatch => {\n    const token = localStorage.token;\n\n    if (token) {\n      fetch('http://localhost:3000/profile', {\n        headers: {\n          Authorization: token\n        }\n      }).then(res => res.json()).then(profileData => {\n        // debugger\n        dispatch(loginUser(profileData));\n      });\n    }\n  };\n};\nexport const logoutUser = () => ({\n  type: 'LOGOUT_USER'\n});\nexport const fetchCategories = () => dispatch => {\n  fetch('http://localhost:3000/categories').then(res => res.json()).then(categoriesJson => {\n    dispatch({\n      type: \"GET_CURRENT_CATEGORIES\",\n      categories: categoriesJson\n    });\n  });\n}; // export const fetchedCategories = () => {\n//     GET_CURRENT_CATEGORIES\n// }\n// export const addToCart = (cartData) => dispatch => {\n//     dispatch({ type: 'ADD_TO_CART', data: cartData })\n// }\n\nexport const fetchProducts = () => dispatch => {\n  fetch('http://localhost:3000/products').then(res => res.json()).then(productsJson => {\n    dispatch({\n      type: \"GET_CURRENT_PRODUCTS\",\n      products: productsJson\n    });\n  });\n};\nexport const grapSingleCategoy = singleCategory => dispatch => {\n  dispatch({\n    type: \"GET_SINGLE_CATEGORY\",\n    category: singleCategory\n  });\n};\nexport const grabSingleProduct = singleProduct => dispatch => {\n  dispatch({\n    type: \"GET_SINGLE_PRODUCT\",\n    product: singleProduct\n  });\n}; // Add to cart action //\n\nexport const addToCart = data => dispatch => {\n  console.log(data);\n  const userId = data.user.id;\n  const currentOrder = data.user.current_order;\n  const productId = data.product.id;\n  console.log(userId);\n\n  if (currentOrder === null) {\n    let config = {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: userId\n      })\n    };\n    fetch(\"http://localhost:3000/orders\", config).then(rsp => rsp.json()).then(data => updateNewOrder(data));\n  }\n\n  const updateNewOrder = data => {\n    console.log(data);\n    dispatch({\n      type: \"NEW_ORDER\",\n      cart: data\n    });\n    let config = {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        current_order: data.id\n      })\n    };\n    fetch(\"http://localhost:3000/users/\".concat(userId), config).then(rsp => rsp.json()).then(data => dispatch({\n      type: \"UPDATE_CURRENT_USER\",\n      current_site_user: data\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/Lewamey/Desktop/final_project/marketplace/frontend-marketplace/src/redux/actions.js"],"names":["userPostFetch","user","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","data","token","localStorage","loginUser","userObj","type","payload","userLoginFetch","console","log","getProfileFetch","Authorization","profileData","logoutUser","fetchCategories","categoriesJson","categories","fetchProducts","productsJson","products","grapSingleCategoy","singleCategory","category","grabSingleProduct","singleProduct","product","addToCart","userId","id","currentOrder","current_order","productId","config","user_id","rsp","updateNewOrder","cart","current_site_user"],"mappings":"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","sourcesContent":["export const userPostFetch = user => {\n    return dispatch => {\n        return fetch('http://localhost:3000/signup', {\n                method: 'POST',\n                headers: {\n                    'Content-Type':'application/json',\n                    'Accept':'application/json'\n                  },\n                  body: JSON.stringify(user)\n            })\n            .then(res => res.json())\n            .then(data => {\n                if (data.token) {\n                    localStorage.token = data.token\n                    dispatch(loginUser(data.user))\n                    // this.props.history.goBack()\n                }\n            });\n    }\n}\n\nconst loginUser = userObj => ({\n    type: 'LOGIN_USER',\n    payload: userObj\n})\n\n\n\nexport const userLoginFetch = user => {\n    console.log(user)\n    \n    return dispatch => {\n        return fetch('http://localhost:3000/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type':'application/json',\n                    'Accept':'application/json'\n                },\n                body: JSON.stringify(user)\n            })\n            .then(res => res.json())\n            .then(data => {\n                if (data.token) {\n                    localStorage.token = data.token\n                    dispatch(loginUser(data.user))\n                    console.log(data);\n                    \n                    // this.props.history.goBack()\n                }\n            });\n    }\n}\n\nexport const getProfileFetch = () => {\n    return dispatch => {\n        const token = localStorage.token\n        if (token) {\n            fetch('http://localhost:3000/profile', {\n                headers: {\n                    Authorization: token\n                }\n            })\n            .then(res => res.json())\n            .then(profileData => {\n                // debugger\n                dispatch(loginUser(profileData))\n            })\n        }\n    }\n}\n\n\nexport const logoutUser = () => ({\n    type: 'LOGOUT_USER'\n})\n\n\nexport const fetchCategories = () => dispatch => {\n    fetch('http://localhost:3000/categories')\n        .then(res => res.json())\n        .then(categoriesJson => {\n            dispatch({ type: \"GET_CURRENT_CATEGORIES\", categories: categoriesJson})\n            \n        })\n}\n\n// export const fetchedCategories = () => {\n//     GET_CURRENT_CATEGORIES\n// }\n\n// export const addToCart = (cartData) => dispatch => {\n//     dispatch({ type: 'ADD_TO_CART', data: cartData })\n// }\n\nexport const fetchProducts = () => dispatch => {\n    fetch('http://localhost:3000/products')\n        .then(res => res.json())\n        .then(productsJson => {\n            dispatch({ type: \"GET_CURRENT_PRODUCTS\", products: productsJson})\n            \n        })\n}\n\n\nexport const grapSingleCategoy = (singleCategory) => dispatch => {\n    dispatch({ type: \"GET_SINGLE_CATEGORY\", category: singleCategory })\n}\n\n\nexport const grabSingleProduct = (singleProduct) => dispatch => {\n    dispatch({ type: \"GET_SINGLE_PRODUCT\", product: singleProduct})\n}\n\n\n\n// Add to cart action //\nexport const addToCart = data => dispatch => {\n    console.log(data)\n    const userId = data.user.id  \n    const currentOrder = data.user.current_order\n    const productId = data.product.id\n    console.log(userId)\n\n    if (currentOrder === null) {\n        let config = {\n            method: \"POST\",\n            headers: {\n              'Content-Type':'application/json',\n              'Accept':'application/json'\n            },\n            body: JSON.stringify({user_id: userId})\n          }\n        \n        fetch(\"http://localhost:3000/orders\", config)\n            .then(rsp => rsp.json())\n            .then(data => updateNewOrder(data))            \n    }\n\n\n    const updateNewOrder = data => {\n        console.log(data);\n        dispatch({ type: \"NEW_ORDER\", cart: data})\n\n        let config = {\n            method: \"PATCH\",\n            headers: {\n              'Content-Type':'application/json',\n              'Accept':'application/json'\n            },\n            body: JSON.stringify({current_order: data.id})\n          }\n          fetch(`http://localhost:3000/users/${userId}`, config)\n            .then(rsp => rsp.json())\n            .then(data => dispatch({ type: \"UPDATE_CURRENT_USER\", current_site_user: data}))\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}